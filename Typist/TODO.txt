Main unsolved problems:

* scrolling the text

- precise positioning (of error characters and cursor)

* changing settings at runtime



General:

- add user setting: wrap text; if set to false, text will scroll to the left as user is typing; also, add horizontal scroll bar (if needed)

- when word wrap = true: new property on ROTypingBuffer, MultipleSpaceIndexes (int[]); an element in this list is the index of the last space in a group (of two or more); use it to calculate the max width of the text, and scroll text to the left when typing these spaces, if they fall at the right edge of the TypingBox; but don't necessarily enable the horizontal scroll bar when scrolling like this

- the Backspace key should delete all spaces back to a non-space char (similar to the way the Tab key works)

- correct calculation of TotalErrors to better account for the multiple spaces expanded/deleted by Tab/Backspace


- predefined sets of settings: Article (eliminate multiple spaces, wrap long lines), Code (leave spaces alone, no wrap), Characters (large font, centered)

- add user setting: "Show visual glyphs for word wrap" (as in VS); or, alternatively: show visual glyphs when "Word wrap" is off, for lines that go beyond the right edge of the screen

- allow scrollbars (vertical and horizontal) to be moved by the user, to take a peek at the rest of the text (two Paint modes: 'follow the cursor' and 'follow the scrollbars')

- separate user setting "Remove multiple whitespace when importing" into two settings, one for multiple spaces and one for multiple empty lines; maybe two radio buttons, "Remove ALL multiple whitespace" and "Remove:", and then the checkboxes

- separate Settings dialog into sections (Import, General and/or Practice Mode etc.)

- file reload (menu item and shortcut, Ctrl+R or Ctrl+L); ask for confirmation, if current text is unfinished (maybe a user setting, "Ask before reloading, if unfinished")

- remove the two big buttons at the top (Import and Start), and add an application menu (a more extended version of the context menu, with the status bar menu added in etc.); also, and a toolbar at the top, with nice icons (and optional text), showing the most used commands (Open, Start/Pause/Resume, many font commands, Settings etc.)

- put the statistics now at the top (WPM, Errors, Accuracy, Time) into a FlowLayoutPanel, so that all of them will be visible even when the window becomes very narrow; show a label next to each; decouple them definitively from the two buttons (Import and Start)

- show a small dialog with shortcuts that are not on the menu ("Other shortcuts...")


- for the three generator projects (chars, code, Wikipedia): save the local source/destination folders picked by the user in Properties.Settings.Default

- add user setting: center text horizontally

- add user setting: theme.CursorColor (or the theme name, e.g., "Default")

- save theme(s); multiple predefined themes

- disable certain context menu items and/or keyboard shortcuts, when in practice mode

- change the name of the program/project to something more memorable than "Typist"



Low priority:

- switch from Windows Forms (GDI+) to WPF, for better Font support (sharper-looking font display, access to OpenType fonts)

- Blind mode: text color is white (Imported, Typed, and Error ForeColor, but Error BackColor is gray [or not?]); detect errors by beep alone; (maybe cursor is also white?); optionally, user can set a time interval after which some clues are shown (e.g., 3 seconds), perhaps the whole text in normal colors

- allow non-ASCII input chars (including ALT-<key> combinations); test with Romanian chars (and French, and German); (for some reason, Alt-<key> combinations don't even arrive at the KeyPress event handler)

- add to Setup project: Start menu shortcuts, right-click menu "Open"



Paint event handler:

- avoid the cursor staying in the same place for two consecutive chars (at the beginning of line, after a long line that doesn't fit one more char); if the char has an empty rectangle (zero w/h), that means it's at the end of line, so draw the cursor/error to the right of the prev char, on the same line (leave an empty margin to the right of the form)

- test how it works with two or more spaces at the end of a screen line (but no '\n' char); do all of them have size zero?

- bug: with a non-fixed-width font (e.g., Verdana), chars on the last line being typed become misaligned, until typing past the end of the (screen) line

- align error highlight chars better with the rest of the text



* add user setting: "Remove spaces at end of line" (move existent code from "Remove multiple whitespace when importing")
* on the status bar: add SplitButton/DropDownButton that selects the statistic to be displayed next to the progress bar: percentage typed, typed/imported ratio, typed only, imported only
* font-related shortcut: Ctrl+I to turn Italic on/off (change shortcut for Import to Ctrl+O)
* font-related shortcut: Ctrl+B to turn Bold on/off
* add a "traffic light" to the status bar, indicating: gray for not started, green for practice mode, yellow for paused, red for finished
* bug: when VisibleNewlines is true, if the pilcrow makes a paragraph one line longer, the cursor and the errors will appear one line too high compared to the text; (make VisibleNewlines a property of TextBuffer)
* add a lateral scroll bar (and a label with the progress percentage)
* use StatusStrip instead of Label as a status bar
* bar cursor line width should depend more closely on font size
* font-related shortcut: Ctrl +/- to make the font larger/smaller by 0.25pt
* display debug messages from the TypingBox on the status bar (label) of the form
* scroll the text up as the user is typing, if not all of it fits on the screen; keep the position of the current line around the middle of the screen
* include the .msi file into the Git repository (VS 2008 Express Edition cannot open/build Setup projects)
* rename class Fonts to PredefinedFonts, with 3 static properties: Small, Large, and All; rename property FavoriteFonts (TypistForm) to PredefinedFonts (also, class FavoriteFont to PredefinedFont)
* add Consolas font to Setup project
* on the right-click menu: Settings dialog (at least beepOnError, pauseAfterElapsed, and theme.CursorColor, which I change all the time; maybe also allowBackspace, visibleNewlines, countWhitespaceAsWordChars, and eliminateMultipleWhitespace); shortcut: Ctrl-X
* flags: "eliminate multiple spaces" and "eliminate multiple spaces if not at beginning of line" (but leave newlines alone); better name: elimRedundantWhitespaces (or separately: spaces at beginning of line, at end of line, within the line, consecutive newlines)
* add a right-click menu, containing actions that are now keyboard shortcuts (Ctrl-P, Ctrl-M, Ctrl-F, Ctrl-S, Ctrl-N, Ctrl-Shift-N)
* add to the list of favorite fonts only those fonts that are installed on the current machine
* why is it that some OpenType fonts do not appear in the standard Font Dialog?
* create a Setup project; make it install fixed-pitch fonts (Anonymous Pro, Bitstream Vera Sans Mono, Andale Mono, etc.), if they don't yet exist on the machine
* shortcut: Ctrl-F for "Change Font", in dialog
* display Unicode chars
* refactor the "typing zone" of the form (the PictureBox with its Paint event handler) into a separate user control
* 'Open With...' from Windows Explorer
* bug: when window is maximized (or just wide), after an error it takes about half a second for the error rectangles to appear on screen (a very noticeable delay); (solved: the cause appears to be a slow audio card; turning theme.BeepOnError = false eliminates the delay)
* save window position between sessions (instead of always starting centered)
* color schemes (themes)
* bug for 'Ernest Hemingway.txt' file: when typing "non-fiction" (towards the end of the first paragraph), the "non-" stays on the preceding line (because of the dash)
* pause if minimized
* new program flag: cursorAsVerticalBar (false means underscore char, '_')
* new program flag: allowBackspace
* make Esc switch off PracticeMode
* catch Esc and Backspace keys while NOT in PracticeMode
* Tab chars ('\t') at the beginning of the line should advance the cursor to the first printable char (to be used with Code practice texts, e.g., Haskell or C# source code)
* deal with the end of the imported text (limit the length of the typed text, by blocking keyboard input; avoid exception/crash if the last char is an error)
* display underscore char ('_') separately, as a cursor (don't just append it to TypedText, but use the getRectangle method to position it on the screen)
* error: typing a printable char instead of a newline (show the char at the end of the line, in red)
* retrieve 32 rectangles at a time when displaying all uncorrected errors

*(o) calculate the vertical offset of the cursor and the error rectangle based on font size (instead of using constants, barCursorVOffset and errorBackgroundVOffset)
*(o) round rowHeight value, if not an integer
*(o) remove OpenType fonts (and other non-TrueType fonts) from Setup project
*(o) refactor the saving of window size/position/maximized(/minimized) into a reusable user control
*(o) set default font to Lucida Console (large)
*(o) allow button mnemonics (& in labels) only when Alt is pressed at the same time as the key (NOT: Alt, pause, key)
*(o) keep a MissingNewlines property in class TextBuffer; insert all missing newlines before showing TypedText on the screen, so that typed chars will always display on top of the originals (even after typing a printable char for a newline in the original)
